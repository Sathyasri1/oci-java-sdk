/**
 * Copyright (c) 2016, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
package com.oracle.bmc.model;

import com.oracle.bmc.ClientRuntime;
import com.oracle.bmc.ServiceDetails;
import com.oracle.bmc.http.internal.RFC3339DateFormat;
import com.oracle.bmc.util.internal.StringUtils;
import lombok.Getter;

import java.util.Date;

public class BmcException extends RuntimeException {
    /**
     * Name of the header that contains the request id.
     */
    public static final String OPC_REQUEST_ID_HEADER = "opc-request-id";

    /**
     * The HTTP status code.
     */
    @Getter private final int statusCode;

    /**
     * Service specific code returned. Null if the client timed out or failed to get a response from the service.
     */
    @Getter private final String serviceCode;

    /**
     * Flag to indicate that the request timed out. Status code and service code should not be used if this is true.
     */
    @Getter private final boolean timeout;

    /**
     * The opc-request-id header returned by the service that should be provided for support requests.
     *
     * If the client timed out or failed to get a response from the service, then this is the outbound request id,
     * i.e. either the value for the {@link BmcException#OPC_REQUEST_ID_HEADER} header set by the caller in an
     * invocation callback, or otherwise a value automatically generated by the SDK.
     */
    @Getter private final String opcRequestId;

    /**
     * Flag to indicate that the exception originated from the client and not from the service.
     * Status code and service code should not be used if this is true.
     */
    @Getter private final boolean isClientSide;

    public BmcException(
            int statusCode,
            String serviceCode,
            String message,
            String opcRequestId,
            Throwable cause) {
        super(message, cause);
        this.statusCode = statusCode;
        this.serviceCode = serviceCode;
        this.opcRequestId = opcRequestId;
        this.timeout = false;
        this.isClientSide = false;
    }

    public BmcException(int statusCode, String serviceCode, String message, String opcRequestId) {
        super(message);
        this.statusCode = statusCode;
        this.serviceCode = serviceCode;
        this.opcRequestId = opcRequestId;
        this.timeout = false;
        this.isClientSide = false;
    }

    public BmcException(boolean timeout, String message, Throwable cause, String opcRequestId) {
        super(message, cause);
        this.statusCode = -1;
        this.serviceCode = null;
        this.opcRequestId = opcRequestId;
        this.timeout = timeout;
        this.isClientSide = true;
    }

    @Override
    public String getMessage() {
        String requestId =
                this.opcRequestId != null
                        ? " ("
                                + (isClientSide ? "outbound " : "")
                                + "opc-request-id: "
                                + this.opcRequestId
                                + ")"
                        : "";

        String targetService = ServiceDetails.getServiceName();
        String timestamp = RFC3339DateFormat.formatRfc3339(new Date(), true);
        String clientVersion = ClientRuntime.getRuntime().getClientInfo();
        String errorTroubleshootingLink =
                String.format(
                        "https://docs.oracle.com/en-us/iaas/Content/API/References/apierrors.htm#apierrors_%s__%s_%s",
                        statusCode,
                        statusCode,
                        StringUtils.isNotBlank(serviceCode) ? serviceCode.toLowerCase() : "");

        return String.format(
                "Error returned by %s operation in %s service."
                        + "(%s, %s, %s) %s%s"
                        + "\nTimestamp: %s"
                        + "\nClient version: %s"
                        + "\nRequest Endpoint: %s"
                        + "\nTroubleshooting Tips: See %s for more information about resolving this error"
                        + "\nAlso see %s for details on this operation's requirements."
                        + "\nTo get more info on the failing request, you can enable debug level logs as mentioned in `Using SLF4J for Logging section` in https://docs.oracle.com/en-us/iaas/Content/API/SDKDocs/javasdkconfig.htm."
                        + "\nIf you are unable to resolve this %s issue, please contact Oracle support and provide them this full error message.",
                ServiceDetails.getOperationName(),
                targetService,
                statusCode,
                serviceCode,
                timeout,
                super.getMessage(),
                requestId,
                timestamp,
                clientVersion,
                ServiceDetails.getRequestEndpoint(),
                errorTroubleshootingLink,
                ServiceDetails.getApiReferenceLink(),
                targetService);
    }
}
